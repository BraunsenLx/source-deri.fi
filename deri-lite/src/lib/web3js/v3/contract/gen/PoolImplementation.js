// this file is generated by script, don't modify it !!!
import { ContractBase } from '../../../shared/contract/contract_base.js'
import { ADDRESS_ZERO } from '../../../shared/config/constant.js'
import { deleteIndexedKey } from '../../../shared/utils/web3.js'
import { poolImplementationAbi } from '../abi/poolImplementationAbi.js'
import { bg } from '../../../shared/utils/convert.js'
import { MAX_UINT256_DIV_ONE } from '../../../shared/config/chain.js'


const toWei = (amount, bTokenDecimals=18) => {
  return  bg(amount, bTokenDecimals).toFixed(0).toString()
}

export class PoolImplementation extends ContractBase {
  // init
  constructor(chainId, contractAddress, opts = {}) {
    super(chainId, contractAddress, poolImplementationAbi)
    // for pool use
    this.initialBlock = opts.initialBlock || ""
    this.addresses = {}
    this.addresses.xvsAddress = opts.xvsAddress || ""
    this.config = this.config || {}
    this.config.tokens = opts.tokens || []
  }

  // query
  async admin() {
    const res = await this._call('admin', [])
    return deleteIndexedKey(res)
  }
  async cumulativePnlPerLiquidity() {
    const res = await this._call('cumulativePnlPerLiquidity', [])
    return deleteIndexedKey(res)
  }
  async implementation() {
    const res = await this._call('implementation', [])
    return deleteIndexedKey(res)
  }
  async reserveRatioB0() {
    const res = await this._call('reserveRatioB0', [])
    return deleteIndexedKey(res)
  }
  async lTokenAddress() {
    const res = await this._call('lToken', [])
    return deleteIndexedKey(res)
  }
  async liquidationRewardCutRatio() {
    const res = await this._call('liquidationRewardCutRatio', [])
    return deleteIndexedKey(res)
  }
  async liquidity() {
    const res = await this._call('liquidity', [])
    return deleteIndexedKey(res)
  }
  async lpInfos(account) {
    const lTokenId = await this.lToken.getTokenIdOf(account)
    const res = await this._call('lpInfos', [lTokenId])
    return deleteIndexedKey(res)
  }
  async lpsPnl() {
    const res = await this._call('lpsPnl', [])
    return deleteIndexedKey(res)
  }
  async markets(bTokenAddress) {
    const res = await this._call('markets', [bTokenAddress])
    return deleteIndexedKey(res)
  }
  async maxLiquidationReward() {
    const res = await this._call('maxLiquidationReward', [])
    return deleteIndexedKey(res)
  }
  async minLiquidationReward() {
    const res = await this._call('minLiquidationReward', [])
    return deleteIndexedKey(res)
  }
  async minRatioB0() {
    const res = await this._call('minRatioB0', [])
    return deleteIndexedKey(res)
  }
  async nameId() {
    const res = await this._call('nameId', [])
    return deleteIndexedKey(res)
  }
  //  async oracleManager() {
  //    const res = await this._call('oracleManager', [])
  //    return deleteIndexedKey(res)
  //  }
  async pTokenAddress() {
    const res = await this._call('pToken', [])
    return deleteIndexedKey(res)
  }
  async poolInitialMarginMultiplier() {
    const res = await this._call('poolInitialMarginMultiplier', [])
    return deleteIndexedKey(res)
  }
  async protocolFeeAccrued() {
    const res = await this._call('protocolFeeAccrued', [])
    return deleteIndexedKey(res)
  }
  async protocolFeeCollectRatio() {
    const res = await this._call('protocolFeeCollectRatio', [])
    return deleteIndexedKey(res)
  }
  async protocolFeeCollector() {
    const res = await this._call('protocolFeeCollector', [])
    return deleteIndexedKey(res)
  }
  async swapperAddress() {
    const res = await this._call('swapper', [])
    return deleteIndexedKey(res)
  }
  async symbolManagerAddress() {
    const res = await this._call('symbolManager', [])
    return deleteIndexedKey(res)
  }
  async tdInfos(account) {
    const pTokenId = await this.pToken.getTokenIdOf(account)
    const res = await this._call('tdInfos', [pTokenId])
    return deleteIndexedKey(res)
  }
  async tokenB0Address() {
    const res = await this._call('tokenB0', [])
    return deleteIndexedKey(res)
  }
  async tokenWETHAddress() {
    const res = await this._call('tokenWETH', [])
    return deleteIndexedKey(res)
  }
  async vTokenB0Address() {
    const res = await this._call('vTokenB0', [])
    return deleteIndexedKey(res)
  }
  async vTokenETHAddress() {
    const res = await this._call('vTokenETH', [])
    return deleteIndexedKey(res)
  }
  async vaultImplementation() {
    const res = await this._call('vaultImplementation', [])
    return deleteIndexedKey(res)
  }
  async vaultTemplate() {
    const res = await this._call('vaultTemplate', [])
    return deleteIndexedKey(res)
  }
  async versionId() {
    const res = await this._call('versionId', [])
    return deleteIndexedKey(res)
  }

  // tx
  //  async addMarket(accountAddress, market) {
  //    return await this._transact('addMarket', [market], accountAddress)
  //  }
  //  async approveSwapper(accountAddress, underlying) {
  //    return await this._transact('approveSwapper', [underlying], accountAddress)
  //  }
  async claimVenusLp(accountAddress, account, opts) {
    return await this._transact('claimVenusLp', [account], accountAddress, opts)
  }
  async claimVenusTrader(accountAddress, account, opts) {
    return await this._transact('claimVenusTrader', [account], accountAddress, opts)
  }
  async collectProtocolFee(accountAddress, opts) {
    return await this._transact('collectProtocolFee', [], accountAddress, opts)
  }
  async liquidate(accountAddress, pTokenId, oracleSignatures=[], opts) {
    return await this._transact('liquidate', [pTokenId, oracleSignatures], accountAddress, opts)
  }
  async addLiquidity(accountAddress, underlying, amount, oracleSignatures=[], opts) {
    amount = toWei(amount, this.bTokenDecimals[underlying])
    if (underlying === this.addresses.tokenWETH) {
      return await this._transact('addLiquidity', [ADDRESS_ZERO, '0', oracleSignatures], accountAddress, { value: amount, ...opts });
    } else {
      return await this._transact('addLiquidity', [underlying, amount, oracleSignatures], accountAddress, opts)
    }
  }
  async removeLiquidity(accountAddress, underlying, amount, oracleSignatures=[], opts) {
    if (amount !== MAX_UINT256_DIV_ONE) {
      amount = toWei(amount, this.bTokenDecimals[underlying])
    }
    if (underlying === this.addresses.tokenWETH) {
      return await this._transact('removeLiquidity', [ADDRESS_ZERO, amount, oracleSignatures], accountAddress, opts)
    } else {
      return await this._transact('removeLiquidity', [underlying, amount, oracleSignatures], accountAddress, opts)
    }
  }
  async addMargin(accountAddress, underlying, amount, oracleSignatures=[], opts) {
    amount = toWei(amount, this.bTokenDecimals[underlying])
    if (underlying === this.addresses.tokenWETH) {
      return await this._transact('addMargin', [ADDRESS_ZERO, '0', oracleSignatures], accountAddress, { value: amount, ...opts});
    } else {
      return await this._transact('addMargin', [underlying, amount, oracleSignatures], accountAddress, opts)
    }
  }
  async removeMargin(accountAddress, underlying, amount, oracleSignatures = [], opts) {
    if (amount !== MAX_UINT256_DIV_ONE) {
      amount = toWei(amount, this.bTokenDecimals[underlying])
    }
    if (underlying === this.addresses.tokenWETH) {
      return await this._transact("removeMargin", [ADDRESS_ZERO, amount, oracleSignatures], accountAddress, opts);
    } else {
      return await this._transact("removeMargin", [underlying, amount, oracleSignatures], accountAddress, opts);
    }
  }
  //  async setAdmin(accountAddress, newAdmin) {
  //    return await this._transact('setAdmin', [newAdmin], accountAddress)
  //  }
  async trade(accountAddress, symbolName, tradeVolume, priceLimit, oracleSignatures=[], opts) {
    return await this._transact('trade', [symbolName, tradeVolume, priceLimit, oracleSignatures], accountAddress, opts)
  }
  async claimStakedAaveLp(accountAddress, reward, account) {
    return await this._transact('claimStakedAaveLp', [reward, account], accountAddress)
  }
  async claimStakedAaveTrader(accountAddress, reward, account) {
    return await this._transact('claimStakedAaveTrader', [reward, account], accountAddress)
  }
}