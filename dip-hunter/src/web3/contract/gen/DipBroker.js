// this file is generated by script, don't modify it !!!
import { ContractBase } from '../contract_base.js'
import { deleteIndexedKey } from '../../utils/lang.js'
import { dipBrokerAbi } from '../abi/dipBrokerAbi.js'

export class DipBroker extends ContractBase {
  // init
  constructor(chainId, contractAddress, opts = {}) {
    super(chainId, contractAddress, dipBrokerAbi, opts.isNodeEnv)
    // for pool use
    this.initialBlock = opts.initialBlock || ""
    this.config = opts.config || {}
  }

  // query
  async admin() {
    const res = await this._call('admin', [])
    return deleteIndexedKey(res)
  }
  // async clientImplementation() {
  //   const res = await this._call('clientImplementation', [])
  //   return deleteIndexedKey(res)
  // }
  // async clientTemplate() {
  //   const res = await this._call('clientTemplate', [])
  //   return deleteIndexedKey(res)
  // }
  async clients(account, pool, symbolId) {
    const res = await this._call('clients', [account, pool, symbolId])
    return deleteIndexedKey(res)
  }
  async getUserStatus(account, pool, symbolId) {
    const res = await this._call('getUserStatus', [account, pool, symbolId])
    return deleteIndexedKey(res)
  }
  async getUserStatuses(account, pool, symbols) {
    const res = await this._call('getUserStatuses', [account, pool, symbols])
    return deleteIndexedKey(res)
  }
  async getVolume(account, pool, symbolId) {
    const res = await this._call('getVolume', [account, pool, symbolId])
    return deleteIndexedKey(res)
  }
  async getVolumes(account, pool, symbols) {
    const res = await this._call('getVolumes', [account, pool, symbols])
    return deleteIndexedKey(res)
  }
  // async implementation() {
  //   const res = await this._call('implementation', [])
  //   return deleteIndexedKey(res)
  // }
  // async nameId() {
  //   const res = await this._call('nameId', [])
  //   return deleteIndexedKey(res)
  // }
  // async swapper() {
  //   const res = await this._call('swapper', [])
  //   return deleteIndexedKey(res)
  // }
  // async versionId() {
  //   const res = await this._call('versionId', [])
  //   return deleteIndexedKey(res)
  // }

  // tx
  async approveSwapper(accountAddress, asset, opts={}) {
    return await this._transact('approveSwapper', [asset], accountAddress, opts)
  }
  // async claimRewardAsLpAave(accountAddress, pool, clients, opts={}) {
  //   return await this._transact('claimRewardAsLpAave', [pool, clients], accountAddress, opts)
  // }
  // async claimRewardAsLpVenus(accountAddress, pool, clients, opts={}) {
  //   return await this._transact('claimRewardAsLpVenus', [pool, clients], accountAddress, opts)
  // }
  // async claimRewardAsTraderAave(accountAddress, pool, clients, opts={}) {
  //   return await this._transact('claimRewardAsTraderAave', [pool, clients], accountAddress, opts)
  // }
  // async claimRewardAsTraderVenus(accountAddress, pool, clients, opts={}) {
  //   return await this._transact('claimRewardAsTraderVenus', [pool, clients], accountAddress, opts)
  // }
  // async setAdmin(accountAddress, newAdmin, opts={}) {
  //   return await this._transact('setAdmin', [newAdmin], accountAddress, opts)
  // }
  async trade(accountAddress, pool, asset, isWithdraw, amount, symbolName, tradeVolume, priceLimit, oracleSignatures, opts={}) {
    console.log('---', pool, asset, isWithdraw, amount, symbolName, tradeVolume, priceLimit, oracleSignatures)
    return await this._transact('trade', [pool, asset, isWithdraw, amount, symbolName, tradeVolume, priceLimit, oracleSignatures], accountAddress, opts)
  }

}